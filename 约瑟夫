package sampleTest;

import java.util.ArrayList;
import java.util.List;

class Node {
	public int no;// 编号
	public Node next;// 下一个节点

	public Node(int no) {
		this.no = no;
	}
}

public class Any {
	/* implement by array */
	public static int[] arrayOfJosephus(int number, int per) {
		int[] man = new int[number];

		for (int count = 1, i = 0, pos = -1; count <= number; count++) {
			do {
				pos = (pos + 1) % number; // 环状处理
				if (man[pos] == 0)
					i++;

				if (i == per) { // 报数为3了
					i = 0;
					break;
				}
			} while (true);

			man[pos] = count;
		}

		return man;
	}

	/* implement by pointer */
	public static void getSeByNode(int totalNum, int cycleNum) {
		// Scanner scanner = new Scanner(System.in);
		// System.out.print("请输入总人数：");
		// int totalNum = scanner.nextInt();
		// System.out.print("请输入报数的大小：");
		// int cycleNum = scanner.nextInt();
		Node header = new Node(1);
		Node pointer = header;
		for (int i = 2; i <= totalNum; i++) {
			pointer.next = new Node(i);
			pointer = pointer.next;
		}
		pointer.next = header;
		// 初始化环形链表结束
		System.out.println("以下是出列的顺序:");
		while (pointer != pointer.next && totalNum >= cycleNum) {
			for (int i = 1; i < cycleNum; i++) {
				pointer = pointer.next;
			}
			System.out.print(pointer.next.no + " ");
			pointer.next = pointer.next.next;
			totalNum = totalNum - 1;
		}
		System.out.println("\n");
		for (int i = 0; i < cycleNum - 1; i++) {
			System.out.println(pointer.no);
			pointer = pointer.next;
		}

	}

	/* implement by array */
	public static void getSe(int m, int n) {
		// 创建有m个值的数组
		int[] a = new int[m];
		// 初始长度，以后出圈一个，长度就减一
		int len = m;
		// 给数组赋值
		for (int i = 0; i < a.length; i++)
			a[i] = i + 1;
		// i为元素下表，j代表当前要报的数
		int i = 0;
		int j = 1;
		int size = 0;
		StringBuffer sb = new StringBuffer();
		while (len > 0) {
			if (a[i % m] > 0) {
				if (j % n == 0) {// 找到要出圈的人，并把圈中人数减一
					System.out.print(a[i % m] + " ");
					sb.append(a[i % m] + " ");
					a[i % m] = -1;
					j = 1;
					i++;
					len--;
				} else {
					i++;
					j++;
				}
			} else {// 遇到空位了，就跳到下一位，但j不加一，也就是这个位置没有报数
				i++;
			}
			size++;
		}
		System.out.println(sb.toString());
		System.out.println(" total size:" + size);
	}

	/* implement by 4 */
	public static void se(int maxNum, int cycNum) {
		List<Integer> people = new ArrayList<Integer>();
		for (int i = 1; i <= maxNum; i++) {
			people.add(i);
		}

		int say = 1; // 报数
		int on = 1;
		while (people.size() != 1) {
			// 报数大过现有人数跳转到第一个
			if (on - people.size() == 1) {
				on = 1;
			}

			// 当报数为3时删除
			if (say == cycNum) {
				System.out.print(people.get(on - 1) + ",");
				people.remove(on - 1);
				say = 1;
			} else {
				say++;
				on++;
			}
		}
		System.out.println(people.get(0));

	}

	public static void main(String[] args) {
		/*
		 * int[] man = Any.arrayOfJosephus(41, 3); int alive = 41 - 2;
		 * 
		 * System.out.println("约琴夫排列："); for (int i = 0; i < 41; i++)
		 * System.out.print(man[i] + " ");
		 * 
		 * System.out.println("\nL表示3个存活的人要放的位置："); for (int i = 0; i < 41; i++)
		 * { if (man[i] > alive) System.out.println("Live" + ":" + (i + 1) +
		 * ","); else System.out.print("Dead ,");
		 * 
		 * if ((i + 1) % 5 == 0) System.out.print("\n"); }
		 */

		// getSeByNode(41, 3);
		getSe(41, 3);


	}
}







